{"version":3,"sources":["components/Card.module.css","components/Nav.module.css","components/Cards.module.css","components/SearchBar.module.css","components/SearchBar.jsx","components/Nav.jsx","components/Card.jsx","components/Cards.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","onSearch","useState","city","setCity","onSubmit","e","preventDefault","type","placeholder","value","onChange","event","target","Nav","className","style","navbarContainer","title","Card","max","min","name","img","onClose","id","cardcontainer","closebutton","onClick","innercontainer","minmax","p","src","alt","Cards","cities","map","main","temp_max","temp_min","weather","icon","alert","App","setCities","ciudad","fetch","then","r","json","recurso","undefined","Math","round","wind","speed","temp","clouds","all","latitud","coord","lat","longitud","lon","oldCities","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d44b601.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardcontainer\":\"Card_cardcontainer__2C4lo\",\"closebutton\":\"Card_closebutton__3LCgE\",\"innercontainer\":\"Card_innercontainer__22Sx0\",\"minmax\":\"Card_minmax__3zHyp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarContainer\":\"Nav_navbarContainer__3VmjF\",\"title\":\"Nav_title__1Zi6B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardcontainer\":\"Cards_cardcontainer__11KMM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SearchBar_button__3m9L1\"};","import React, {useState} from 'react';\r\n\r\nimport style from './SearchBar.module.css'\r\n\r\n\r\n\r\nexport default function SearchBar({onSearch}) {\r\n  const [city, setCity] = useState(\"\");\r\n  \r\n  return (\r\n    <form onSubmit={(e) => {\r\n      e.preventDefault();\r\n      onSearch(city);\r\n    }}>\r\n      <input \r\n        type=\"text\"\r\n        placeholder=\"Ciudad...\"\r\n        value={city}\r\n        onChange={event => setCity(city + event.target.value)}\r\n      />\r\n      <input type=\"submit\" value=\"Agregar\" />\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport style from './Nav.module.css';\r\nimport SearchBar from './SearchBar.jsx';\r\n\r\n\r\nexport default function Nav({onSearch}) {\r\n    \r\n    return (\r\n        <nav>\r\n            <div className={style.navbarContainer}>\r\n                <h1 className={style.title}>My Weather App</h1>\r\n                <SearchBar \r\n                  onSearch={onSearch}\r\n                />\r\n            </div>\r\n        </nav>\r\n    )\r\n};","import React from 'react';\r\nimport style from './Card.module.css'\r\n\r\nexport default function Card(max, min, name, img, onClose, id) {\r\n\r\n  return (\r\n    <div className={style.cardcontainer}>\r\n        <button className={style.closebutton} onClick = {onClose}>X</button>\r\n        <div className={style.innercontainer}>\r\n            <h1>{name}</h1>\r\n\r\n            <div className={style.minmax}>\r\n                <p className={style.p}>MIN {min}ยบ</p>\r\n                <p>MAX {max}ยบ</p> \r\n                \r\n                <img src= {'http://openweathermap.org/img/wn/' + img + '@2x.png'} alt='Imag not found' />\r\n            </div>\r\n        </div>\r\n    </div>  \r\n        \r\n  )\r\n};\r\n\r\n","import React from 'react';\r\nimport Card from './Card.jsx';\r\nimport style from './Cards.module.css'\r\n\r\nexport default function Cards({cities, onClose}) {\r\n  \r\n  return (\r\n    <div className={style.cardcontainer}>\r\n      \r\n        {cities && cities.map(city => \r\n            <Card\r\n              key={city.id}\r\n              max={city.main.temp_max}\r\n              min={city.main.temp_min}\r\n              name={city.name}\r\n              img={city.weather[0].icon}\r\n              onClose={() => alert(city.name)}\r\n            />\r\n        )}\r\n  </div>\r\n  )\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Nav from './components/Nav.jsx';\r\nimport Cards from './components/Cards.jsx'\r\n\r\nconst apiKey = '9de5b5b7e7e9140f9e85cff996d581fe'\r\n\r\nfunction App() {\r\n  const [cities, setCities] = useState([]);\r\n\r\n  function onClose(id) {\r\n    setCities(oldCities => oldCities.filter(city => city.id !== id))\r\n  }\r\n\r\n    function onSearch(ciudad) {\r\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\r\n      .then(r => r.json())\r\n      .then((recurso) => {\r\n        if(recurso.main !== undefined){\r\n          const ciudad = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          setCities(oldCities => [...oldCities, ciudad]);\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n      });\r\n\r\n    }\r\n    function onFilter(ciudadId) {\r\n      let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\r\n      if(ciudad.length > 0) {\r\n          return ciudad[0];\r\n      } else {\r\n          return null;\r\n      }\r\n    }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <Nav onSearch={onSearch} />\r\n      </div>\r\n\r\n      <div>\r\n        <Cards \r\n          cities={cities}\r\n          onClose={onClose}\r\n        />\r\n      </div>\r\n  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}